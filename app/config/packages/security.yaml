security:
    enable_authenticator_manager: true

    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'bcrypt'
        
    providers:
        entity_provider:
            entity:
                class: App\Entity\User
                property: email
                
    role_hierarchy:
        ROLE_USER: [IS_AUTHENTICATED_FULLY, IS_AUTHENTICATED_ANONYMOUSLY]
        ROLE_ADMIN: ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_ADMIN]
        
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api_refresh_token:
            pattern: ^/api/auth/token/refresh
            security: false
        api_register:
            pattern: ^/api/auth/register
            security: false
        api_logout:
            pattern: ^/api/auth/logout
            security: false
        api_login:
              pattern: ^/api/auth/login
              stateless: true
              json_login:
                  provider: entity_provider
                  username_path: email
                  password_path: password
                  check_path: /api/auth/login #same as the route configured in config/routes.yaml
                  success_handler: lexik_jwt_authentication.handler.authentication_success
                  failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            lazy: true
            pattern:   ^/api
            stateless: true
            entry_point: jwt
            jwt: ~
            refresh_jwt:
                check_path: /api/auth/token/refresh
        main:
            lazy: true
            pattern: ^/
            security: false

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/api/auth/(login|register|logout|token/refresh)', roles: PUBLIC_ACCESS}
        - { path: '^/api', roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
