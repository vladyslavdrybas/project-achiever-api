security:
    enable_authenticator_manager: true

    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'bcrypt'
    
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
                
    role_hierarchy:
        ROLE_USER: [IS_AUTHENTICATED_FULLY, IS_AUTHENTICATED_ANONYMOUSLY]
        ROLE_ADMIN: ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_ADMIN]
        
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            lazy: true
            pattern: ^/api
            user_checker: App\Security\UserChecker
            access_token:
                token_handler: App\Security\AccessTokenHandler
                token_extractors:
                    - App\Security\Base64HeaderAccessTokenExtractor
#             custom_authenticators:
#                 - App\Security\ApiAccessTokenAuthenticator
        main:
            lazy: true
            pattern: ^/
            user_checker: App\Security\UserChecker
            provider: app_user_provider
            custom_authenticators:
                - App\Security\JsonLoginAuthenticator
            entry_point: App\Security\AuthenticationEntryPoint
            access_denied_handler: App\Security\AccessDeniedHandler

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/login/json$', roles: PUBLIC_ACCESS}
        - { path: '^/register/json$', roles: PUBLIC_ACCESS}
        - { path: '^/logout/json$', roles: PUBLIC_ACCESS}
        - { path: '^/api', roles: ROLE_USER }
        - { path: '^/', roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
