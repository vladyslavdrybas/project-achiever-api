<?php

declare(strict_types=1);

namespace App\Entity;

use App\Repository\AchievementRepository;
use DateTimeInterface;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;

// TODO add startdate
// TODO add calculate spent time
// TODO add avatar
// TODO add link on achievement results
// TODO add scheduler
// TODO add sent marker to remove duplicates on short time range
// TODO condition to complete
#[ORM\Entity(repositoryClass: AchievementRepository::class, readOnly: false)]
#[ORM\Table(name: "achievement")]
class Achievement extends AbstractEntity
{
    #[ORM\Column(name: "title", type: Types::STRING, length: 125, unique: false)]
    protected string $title;

    #[ORM\Column(name: "description", type: Types::STRING, length: 255, unique: false)]
    protected string $description;

    // link on autogenerated image of the achievement content
    #[ORM\Column(name: "content_image_link", type: Types::STRING, unique: false, nullable: true)]
    protected ?string $contentImageLink = null;

    #[ORM\Column(name: "is_public", type: Types::BOOLEAN, options: ["default" => false])]
    protected bool $isPublic = false;

    #[ORM\Column(name: "is_notified", type: Types::BOOLEAN, options: ["default" => false])]
    protected bool $isNotified = false;

    #[ORM\Column(name: "notified_at", type: Types::DATETIME_IMMUTABLE, nullable: true )]
    protected ?DateTimeInterface $notifiedAt;

    #[ORM\Column(name: "done_at", type: Types::DATETIME_IMMUTABLE, nullable: true)]
    protected ?DateTimeInterface $doneAt;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'achievements')]
    #[ORM\JoinColumn(name:'user_id', referencedColumnName: 'id', nullable: false)]
    protected User $owner;

    #[ORM\JoinTable(name: 'achievement_tag')]
    #[ORM\JoinColumn(name: 'achievement_id', referencedColumnName: 'id')]
    #[ORM\InverseJoinColumn(name: 'tag_id', referencedColumnName: 'id')]
    #[ORM\ManyToMany(targetEntity: Tag::class)]
    protected Collection $tags;

    #[ORM\ManyToMany(targetEntity: AchievementList::class, mappedBy: 'achievements')]
    protected Collection $lists;

    #[ORM\OneToMany(mappedBy: 'achievement',targetEntity: AchievementPrerequisiteRelation::class)]
    protected Collection $meAchievementIn;

    #[ORM\OneToMany(mappedBy: 'prerequisite',targetEntity: AchievementPrerequisiteRelation::class)]
    protected Collection $mePrerequisiteIn;

    public function __construct()
    {
        parent::__construct();
        $this->tags = new ArrayCollection();
        $this->lists = new ArrayCollection();
        $this->prerequisites = new ArrayCollection();
        $this->achievements = new ArrayCollection();
    }

    /**
     * @return \Doctrine\Common\Collections\ArrayCollection|\Doctrine\Common\Collections\Collection
     */
    public function getTags(): ArrayCollection|Collection
    {
        return $this->tags;
    }

    /**
     * @param \Doctrine\Common\Collections\ArrayCollection|\Doctrine\Common\Collections\Collection $tags
     */
    public function setTags(ArrayCollection|Collection $tags): void
    {
        $this->tags = $tags;
    }

    /**
     * @param \App\Entity\Tag $tag
     * @return void
     */
    public function addTag(Tag $tag): void
    {
        if (!$this->tags->contains($tag)) {
            $this->tags->add($tag);
        }
    }

    /**
     * @param \App\Entity\Tag $tag
     * @return void
     */
    public function removeTag(Tag $tag): void
    {
        if ($this->tags->contains($tag)) {
            $this->tags->removeElement($tag);
        }
    }

    /**
     * @return string
     */
    public function getTitle(): string
    {
        return $this->title;
    }

    /**
     * @param string $title
     */
    public function setTitle(string $title): void
    {
        $this->title = $title;
    }

    /**
     * @return string
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * @param string $description
     */
    public function setDescription(string $description): void
    {
        $this->description = $description;
    }

    /**
     * @return bool
     */
    public function isPublic(): bool
    {
        return $this->isPublic;
    }

    /**
     * @param bool $isPublic
     */
    public function setIsPublic(bool $isPublic): void
    {
        $this->isPublic = $isPublic;
    }

    /**
     * @return \DateTimeInterface|null
     */
    public function getDoneAt(): ?DateTimeInterface
    {
        return $this->doneAt;
    }

    /**
     * @param \DateTimeInterface|null $doneAt
     */
    public function setDoneAt(?DateTimeInterface $doneAt = null): void
    {
        $this->doneAt = $doneAt;
    }

    /**
     * @return \App\Entity\User
     */
    public function getOwner(): User
    {
        return $this->owner;
    }

    /**
     * @param \App\Entity\User $owner
     */
    public function setOwner(User $owner): void
    {
        $this->owner = $owner;
    }

    /**
     * @return \DateTimeInterface|null
     */
    public function getNotifiedAt(): ?DateTimeInterface
    {
        return $this->notifiedAt;
    }

    /**
     * @param \DateTimeInterface|null $notifiedAt
     */
    public function setNotifiedAt(?DateTimeInterface $notifiedAt): void
    {
        $this->notifiedAt = $notifiedAt;
    }

    /**
     * @return bool
     */
    public function isNotified(): bool
    {
        return $this->isNotified;
    }

    /**
     * @param bool $isNotified
     */
    public function setIsNotified(bool $isNotified): void
    {
        $this->isNotified = $isNotified;
    }

    /**
     * @return string|null
     */
    public function getContentImageLink(): ?string
    {
        return $this->contentImageLink;
    }

    /**
     * @param string|null $contentImageLink
     */
    public function setContentImageLink(?string $contentImageLink): void
    {
        $this->contentImageLink = $contentImageLink;
    }

    /**
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getLists(): Collection
    {
        return $this->lists;
    }

    public function addList(AchievementList $achievementList): void
    {
        if (!$this->lists->contains($achievementList)) {
            $this->lists->add($achievementList);
            $achievementList->addAchievement($this);
        }
    }

    /**
     * @param \Doctrine\Common\Collections\Collection $lists
     */
    public function setLists(Collection $lists): void
    {
        foreach ($lists as $list) {
            if (!$list instanceof AchievementList) {
                throw new \Exception('Item should be instance of AchievementList');
            }

            $this->addList($list);
        }
    }

    /**
     * @return \Doctrine\Common\Collections\Collection|AchievementPrerequisiteRelation[]
     */
    public function getMeAchievementIn(): Collection
    {
        return $this->meAchievementIn;
    }

    public function setAsAchievement(AchievementPrerequisiteRelation $relation): void
    {
        if (!$this->meAchievementIn->contains($relation)) {
            $this->meAchievementIn->add($relation);
            $relation->setAchievement($this);
        }
    }

    /**
     * @param \Doctrine\Common\Collections\Collection|AchievementPrerequisiteRelation[] $achievements
     */
    public function setMeAchievementIn(Collection $achievements): void
    {
        foreach ($achievements as $achievement) {
            if (!$achievement instanceof AchievementPrerequisiteRelation) {
                throw new \Exception('Prerequisite Achievement should be instance of AchievementPrerequisiteRelation');
            }

            $this->setAsAchievement($achievement);
        }
    }

    /**
     * @return \Doctrine\Common\Collections\Collection|AchievementPrerequisiteRelation[]
     */
    public function getMePrerequisiteIn(): Collection
    {
        return $this->mePrerequisiteIn;
    }

    public function setAsPrerequisite(AchievementPrerequisiteRelation $relation): void
    {
        if (!$this->mePrerequisiteIn->contains($relation)) {
            $this->mePrerequisiteIn->add($relation);
            $relation->setPrerequisite($this);
        }
    }

    /**
     * @param \Doctrine\Common\Collections\Collection|AchievementPrerequisiteRelation[] $prerequisites
     */
    public function setMePrerequisiteIn(Collection $prerequisites): void
    {
        foreach ($prerequisites as $prerequisite) {
            if (!$prerequisite instanceof AchievementPrerequisiteRelation) {
                throw new \Exception('Prerequisite should be instance of AchievementPrerequisiteRelation');
            }

            $this->setAsPrerequisite($prerequisite);
        }
    }
}
