<?php

declare(strict_types=1);

namespace App\Security;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Exception\AuthenticationException;
use Symfony\Component\Security\Core\Exception\BadCredentialsException;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Http\AccessToken\AccessTokenExtractorInterface;
use Symfony\Component\Security\Http\AccessToken\AccessTokenHandlerInterface;
use Symfony\Component\Security\Http\Authentication\AuthenticationFailureHandlerInterface;
use Symfony\Component\Security\Http\Authentication\AuthenticationSuccessHandlerInterface;
use Symfony\Component\Security\Http\Authenticator\Passport\Passport;
use Symfony\Component\Security\Http\Authenticator\Passport\SelfValidatingPassport;
use Symfony\Component\Security\Http\Authenticator\Token\PostAuthenticationToken;
use Symfony\Contracts\Translation\TranslatorInterface;
use Symfony\Component\Security\Http\Authenticator\AccessTokenAuthenticator;
use function var_dump;

class ApiAccessTokenAuthenticator extends AccessTokenAuthenticator
{
    public function __construct(AccessTokenHandlerInterface $accessTokenHandler, AccessTokenExtractorInterface $accessTokenExtractor, ?UserProviderInterface $userProvider = null, ?AuthenticationSuccessHandlerInterface $successHandler = null, ?AuthenticationFailureHandlerInterface $failureHandler = null, ?string $realm = null)
    {
        parent::__construct($accessTokenHandler, $accessTokenExtractor, $userProvider, $successHandler, $failureHandler, $realm);
    }

    public function supports(Request $request): ?bool
    {
         $supports = parent::supports($request); // TODO: Change the autogenerated stub

        var_dump($supports);

        return $supports;
    }
}
